name: release

on:
  push:
    tags: ['v*']          # autobuild on tags
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g. 0.4.2). Leave blank for snapshot'
        required: false
        default: ''

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: codebase_viewer

jobs:
  build:
    name: build-${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    outputs:
      version: ${{ steps.version.outputs.ver }}
    defaults:
      run:
        shell: bash        # force bash everywhere
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive_type: tar.gz
            use_cross: false
            deps: |
              sudo apt-get update -y &&
              sudo apt-get install -y \
                libgtk-3-dev libwebkit2gtk-4.1-dev \
                libayatana-appindicator3-dev librust-alsa-sys-dev librust-dbus-dev
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            archive_type: tar.gz
            use_cross: true
            deps: ""

          # macOS
          - os: macos-latest
            target: x86_64-apple-darwin
            archive_type: zip
            use_cross: false
            deps: ""

          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-gnu
            archive_type: zip
            use_cross: false
            deps: ""     # mingw installed in separate pwsh step

    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: install cross
        if: ${{ matrix.use_cross }}
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: system deps (Linux/macOS)
        if: ${{ matrix.deps != '' }}
        run: ${{ matrix.deps }}

      - name: install mingw (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: choco install -y mingw

      - uses: Swatinem/rust-cache@v2

      - name: compute version
        id: version
        run: |
          if [[ -n "${INPUT_VERSION}" ]]; then
            ver="${INPUT_VERSION}"
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/v(.+)$ ]]; then
            ver="${BASH_REMATCH[1]}"
          else
            ver="snapshot-${GITHUB_SHA:0:7}"
          fi
          echo "ver=$ver" >> "$GITHUB_OUTPUT"
        env:
          INPUT_VERSION: ${{ github.event.inputs.version }}

      - name: build
        run: |
          if [[ "${{ matrix.use_cross }}" == "true" ]]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi

      - name: package
        id: package
        env:
          VER: ${{ steps.version.outputs.ver }}
        run: |
          case "${{ runner.os }}" in
            Windows) exe=".exe"; os_name=windows ;;
            macOS)   exe="";     os_name=macos   ;;
            *)       exe="";     os_name=linux   ;;
          esac

          if [[ "${{ matrix.target }}" == *musl* ]]; then
            arch="x64-musl"
          elif [[ "${{ matrix.target }}" == *gnu* && "${{ runner.os }}" == "Linux" ]]; then
            arch="x64-gnu"
          else
            arch="x64"
          fi

          pkg="${BINARY_NAME}-v${VER}-${os_name}-${arch}"
          archive="${pkg}.${{ matrix.archive_type }}"

          mkdir "$pkg"
          cp "target/${{ matrix.target }}/release/${BINARY_NAME}${exe}" "$pkg/"
          cp LICENSE-* README.md "$pkg/"

          if [[ "${{ matrix.archive_type }}" == "zip" ]]; then
            if [[ "${{ runner.os }}" == "Windows" ]]; then
              powershell -Command "Compress-Archive -Path '${pkg}\\*' -DestinationPath '${archive}'"
            else
              zip -r "${archive}" "${pkg}"
            fi
          else
            tar -czf "${archive}" "${pkg}"
          fi

          echo "archive_name=${archive}" >> "$GITHUB_OUTPUT"

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.package.outputs.archive_name }}
          path: ${{ steps.package.outputs.archive_name }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: list artifacts
        run: ls -R artifacts

      - uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_type == 'tag' && github.ref_name || format('v{0}', needs.build.outputs.version) }}
          name: Release ${{ needs.build.outputs.version }}
          prerelease: ${{ contains(needs.build.outputs.version, '-') }}
          files: artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
