name: release

on:
  push:
    tags:
      - 'v*'        
  workflow_dispatch: {}  

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: codebase_viewer

permissions:
  contents: write

jobs:
  build:
    name: build-${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            use_cross: false
            archive_type: tar.gz
            deps: |
              sudo apt-get update &&
              sudo apt-get install -y \
                libgtk-3-dev libwebkit2gtk-4.1-dev \
                libayatana-appindicator3-dev librust-alsa-sys-dev librust-dbus-dev

          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            use_cross: true
            archive_type: tar.gz
            deps: ""

          - os: macos-latest
            target: x86_64-apple-darwin
            use_cross: false
            archive_type: zip
            deps: ""

          - os: windows-latest
            target: x86_64-pc-windows-gnu
            use_cross: false
            archive_type: zip
            deps: ""

    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: install cross
        if: ${{ matrix.use_cross }}
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: system deps
        if: ${{ runner.os == 'Linux' && matrix.deps != '' }}
        run: ${{ matrix.deps }}

      - uses: Swatinem/rust-cache@v2

      - name: build
        run: |
          if [[ "${{ matrix.use_cross }}" == "true" ]]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi

      - name: package
        run: |
          case "${{ runner.os }}" in
            Windows) ext=".exe";   os_name="windows"; arch="x64" ;;
            macOS)   ext="";       os_name="macos";   arch="x64" ;;
            Linux)
              ext=""; os_name="linux"
              [[ "${{ matrix.target }}" == "x86_64-unknown-linux-musl" ]] && arch="x64-musl" || arch="x64-gnu"
              ;;
          esac

          ver="${GITHUB_REF##refs/tags/v}"
          pkg="${{ env.BINARY_NAME }}-v${ver}-${os_name}-${arch}"
          archive="${pkg}.${{ matrix.archive_type }}"

          mkdir "$pkg"
          cp "target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}${ext}" "$pkg/"
          cp LICENSE-* README.md "$pkg/"

          if [[ "${{ matrix.archive_type }}" == "zip" ]]; then
            if [[ "${{ runner.os }}" == "Windows" ]]; then
              powershell Compress-Archive -Path "$pkg/*" -DestinationPath "$archive"
            else
              zip -r "$archive" "$pkg"
            fi
          else
            tar -czf "$archive" "$pkg"
          fi

          echo "ARCHIVE=$archive" >> "$GITHUB_ENV"

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARCHIVE }}
          path: ${{ env.ARCHIVE }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      - run: ls -R artifacts

      - uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          prerelease: ${{ contains(github.ref_name, '-') }}
          files: artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}